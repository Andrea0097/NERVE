#!/usr/bin/perl

# This script is a wrapper for the PSORTb analysis script (psortb3.pl
# which sits together with this script). This script creates a
# file for the results in the container's mount directory.

use lib '../lib';
use Bio::Tools::PSort::Report::Formatter;
use Bio::Tools::PSort;
use Bio::SeqIO;
use Bio::Tools::PSort::Constants qw(:all);

use Getopt::Long;
use File::Basename;
use strict;

our $ENV;
our $PSORTB_SCRIPT = '/usr/local/psortb/bin/psortb3.pl';
our $docker_results_dir = '/tmp/results';
our $verbose;

sub main {
    my ($cutoff, $format, $help, $output, $divergent);
    my ($exact, $seqfile, $version, $archaea, $positive, $negative);
    my ($xskiplocalizations, $nondocker_results_dir);

    my @args = @ARGV;
    @args = remove_unneeded_args(\@args);

    # Get input
    GetOptions('seq|i=s'     => \$seqfile,  
               'format|f=s'  => \$format,   'divergent|d=f' => \$divergent,
               'verbose|v'   => \$verbose,  'help|h'        => \$help,
               'cutoff|c=f'  => \$cutoff,   'output|o=s'    => \$output,
               'archaea|a'   => \$archaea,
               'negative|n'  => \$negative, 'positive|p'    => \$positive,
               'exact|e'     => \$exact,    'version'       => \$version,
               'x-skip-localizations' => \$xskiplocalizations, 'location|l=s' => \$docker_results_dir);

    # Check input
    usage() && exit(0) if($help);

    if ($version) {
        my $cmd = "$PSORTB_SCRIPT --version";
        #print "cmd = $cmd\n";
        system($cmd);
        exit(0);
    }

    if (defined($verbose)) {
        $verbose = 1;
    } else {
        $verbose = 0;
    }

    check_file_input($seqfile);
    check_gram_type($archaea, $negative, $positive);

    my $gram_code;
    if ($negative)    { $gram_code = "gramneg"; }
    elsif ($positive) { $gram_code = "grampos"; }
    elsif ($archaea)  { $gram_code = "archaea"; }

    my $docker_results_file = get_output_filename($docker_results_dir, $gram_code); # e.g. "/tmp/results/20170525115136_psortb_grampos.txt
    my $fn = basename($docker_results_file);
    print "Saving results to $ENV{MOUNT}/$fn\n";

    my $arg_list = join(' ', @args);
    my $cmd = "$PSORTB_SCRIPT $arg_list $seqfile > $docker_results_file";
    print "\n- Running PSORTb: $cmd\n" if $verbose;
    system($cmd);
    # end of script
}

sub usage {
    $0 =~ /^.*\/(.+)/;
    print("Usage: $1 [-a|-n|-p] [OPTIONS] <sequence file>\n");
    print("Runs $1 on the sequence file provided with the -i option.\n");
    print("  --help, -h        Displays usage information\n");
    print("  --positive, -p    Gram positive bacteria\n");
    print("  --negative, -n    Gram negative bacteria\n");
    print("  --archaea, -a     Archaea\n");
    print("  --cutoff, -c      Sets a cutoff value for reported results\n");
    print("  --divergent, -d   Sets a cutoff value for the multiple\n");
    print("                    localization flag\n");
    print("  --format, -f      Specifies sequence format (default is FASTA)\n");
    print("  --exact, -e       Skip SCLBLASTe (useful for batch runs of data\n");
    print("                    against itself in SCLBLAST)\n");
    print("  --output, -o      Specifies the format for the output (default is\n");
    print("                    'normal')  Value can be one of: normal, terse or long\n");
    print("  --x-skip-localization   \n");
    print("  --verbose, -v     Be verbose while running\n");
    print("  --version         Print the version of PSortb\n\n");
}

sub get_output_filename {
    my ($results_dir, $gram) = @_;

    $results_dir =~ s/\/$//; # remove trailing slash

    my @now = localtime();
    my $timestamp = sprintf("%04d%02d%02d%02d%02d%02d",
                        $now[5]+1900, $now[4]+1, $now[3],
                        $now[2],      $now[1],   $now[0]);

    # increment timestamp number if directory already exists
    while (glob($results_dir.'/'.$timestamp.'_*')) {
        $timestamp++;
    }

    my $outfile = "${results_dir}/result.txt";
    return($outfile);
}

sub check_gram_type {
    my ($arch, $neg, $pos) = @_;

    if ((!$arch) && (!$neg) && (!$pos)) {
        die "You must indicate the organism type (--positive|--negative|--archaea)\n";
    }
    
}

sub check_file_input {
    my $ctr = 0;
    my @input_type = ("input sequence file (--seq)");
    foreach my $file_or_dir (@_) {
        if ((!$file_or_dir) || (! -e $file_or_dir)) {
            print "No such file: $file_or_dir\nPlease enter a valid location for your $input_type[$ctr]\n";
            usage();
            exit(0);
        }
        $ctr++;
    }
}

sub remove_unneeded_args {
    my $args = shift;

    #remove -i and --seq (sequence file input)
    my @modified_arg_list;
    for (my $i=0; $i<scalar(@$args); $i++) {

        if ($$args[$i] =~ /^\/usr\/local\/psortb\/bin\/psort$/) {
            next;
        }
        elsif (($$args[$i] eq '-i') || ($$args[$i] eq '--seq') || ($$args[$i] eq '-l')) {
            $i++; # skip current and next element
        } 
        else {
            push(@modified_arg_list, $$args[$i]);
        }
    }
    return(@modified_arg_list);
}

main();
